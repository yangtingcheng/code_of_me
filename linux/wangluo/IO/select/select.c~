#include"../utili.h"
#include<sys/select.h>

#define MAX_CLIENT_SIZE 5

/*
	基于Select模型的TCP服务器，----------一个服务iq如何与多个客户端进行通信
	1.
*/

int main()
{
	int sockSer = startup(SERVER_IP,SERVER_PORT);

	int client_fd[MAX_CLIENT_SIZE] = {0};
	fd_set readset;
	int max_sock = sockSer;
	int conn_num = 0;	//client connect number
	int i = 0;
	int res;

	char buffer[MAX_BUFFER_SIZE];
	struct timeval tv;
	while(1)
	{
		FD_ZERO(&readset);
		FD_SET(sockSer,&readset);

		for(i = 0; i < MAX_CLIENT_SIZE; ++i)
		{
			if(client_fd[i] != 0)
			{
				FD_SET(client_fd[i],&readset);
			}
		}

		tv.tv_sec = 5;
		tv.tv_usec = 0;

		res = select(max_sock+1,&readset,NULL,NULL,&tv);
		if(res == -1)
		{
			perror("select");
			continue;
		}
		else if(res == 0)
		{
			printf("server time out\n");
			continue;
		}
		else
		{
			for(i = 0; i < conn_num; ++i)
			{
				if(FD_ISSET(client_fd[i],&readset))
				{
					recv(client_fd[i],buffer,MAX_BUFFER_SIZE,0);
					printf("From Client Msg:%s\n",buffer);
					send(client_fd[i],buffer,strlen(buffer)+1,0);
				}
			}
			if(FD_ISSET(sockSer,&readset))
			{
				struct sockaddr_in addrCli;
				socklen_t len = sizeof(struct sockaddr);
				int sockConn = accept(sockSer,(struct sockaddr*)&addrCli,&len);
				if(sockConn == -1)
				{
					perror("accept");
					continue;
				}
				if(conn_num < MAX_CLIENT_SIZE)
				{
					client_fd[conn_num++] = sockConn;
					if(sockConn > max_sock)
						max_sock = sockConn;
				}
				else
				{
					char *msg = "Sorry,Server OverLoad";
					send(sockConn,msg,strlen(msg)+1,0);
					
				}

			}
		}
	}
	close(sockSer);
	return 0;
}
